{"version":3,"sources":["Client.js","component/Query.ts","component/Mutation.ts","component/CreateReply.tsx","component/Comment.tsx","component/CreateComment.tsx","component/CommentList.tsx","App.js","index.js"],"names":["httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","authLink","setContext","_","headers","token","localStorage","getItem","console","log","authorization","client","split","query","definition","getMainDefinition","kind","operation","concat","ApolloClient","GET_COMMENTS","gql","GET_COMMENT","CREATE_COMMENT","CREATE_REPLY","emailRegex","CreateReply","props","React","useState","email","setEmail","content","setContent","emailValid","setEmailValid","useMutation","variables","comment","refetchQueries","id","saveComment","error","data","style","textAlign","padding","message","TextField","label","value","onChange","event","target","test","toLowerCase","variant","placeholder","multiline","rows","rowsMax","width","marginTop","Button","disabled","onClick","useStyles","makeStyles","theme","createStyles","root","flexGrow","maxWidth","paper","spacing","color","palette","text","secondary","margin","date","wordWrap","Comment","classes","addComment","setAddComment","useQuery","_id","loading","Grid","container","className","time","List","replies","map","reply","ListItem","key","size","CreateComment","CommentList","comments","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71739543.chunk.js","sourcesContent":["import { split } from 'apollo-link';\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { HttpLink,createHttpLink } from 'apollo-link-http';\r\nimport { WebSocketLink } from 'apollo-link-ws';\r\nimport { getMainDefinition } from 'apollo-utilities';\r\n//import { ApolloClient } from \"apollo-client\";\r\nimport  ApolloClient  from \"apollo-boost\";\r\nimport { setContext } from 'apollo-link-context';\r\nconst httpLink = new HttpLink({\r\n  uri: 'https://floating-mountain-36472.herokuapp.com/graphql'\r\n});\r\n  \r\n// Create a WebSocket link:\r\nconst wsLink = new WebSocketLink({\r\n  uri: 'wss://murmuring-fortress-24950.herokuapp.com/',\r\n  options: {\r\n    reconnect: true\r\n  }\r\n});\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n  const token = localStorage.getItem('token');\r\n  console.log(\"sending token\")\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    }\r\n  }\r\n}); \r\n// using the ability to split links, you can send data to each link\r\n// depending on what kind of operation is being sent\r\nconst link = split(\r\n  // split based on operation type\r\n  ({ query }) => {\r\n    const definition = getMainDefinition(query);\r\n    return (\r\n      definition.kind === 'OperationDefinition' &&\r\n      definition.operation === 'subscription'\r\n    );\r\n  },\r\n  wsLink,\r\n  authLink.concat(httpLink),\r\n);\r\n  \r\n\r\nconst client=new ApolloClient({\r\n    //link,\r\n    uri: 'http://localhost:5000/graphql',\r\n  //   cache: new InMemoryCache(),\r\n  //   credentials: 'include',\r\n  //   request: async operation => {\r\n  //     operation.setContext({\r\n  //       fetchOptions: {\r\n  //         credentials: 'same-origin'\r\n  //       }\r\n  //     })\r\n  //   },\r\n  //   fetchOptions: {\r\n  //     credentials: 'include'\r\n  //  }\r\n  })\r\n\r\nexport default client","import gql from \"graphql-tag\";\r\n\r\nexport const GET_COMMENTS = gql`\r\n{\r\n  \tcomments{\r\n      _id\r\n      email\r\n      time\r\n      content\r\n      replies{\r\n        _id\r\n        email\r\n        time\r\n        content\r\n      }\r\n    }\r\n}\r\n`;\r\nexport const GET_COMMENT = gql`\r\nquery GET_COMMENT($id:ID){\r\n  comment(id:$id){\r\n    _id\r\n    email\r\n    time\r\n    content\r\n    replies{\r\n      _id\r\n      email\r\n      time\r\n      content\r\n    }\r\n  }\r\n}\r\n`;","import gql from \"graphql-tag\";\r\n\r\nexport const CREATE_COMMENT=gql`\r\n    mutation CREATE_COMMENT($email:String!,$content:String){\r\n        addComment(email:$email,content:$content)\r\n        {\r\n            _id\r\n        }\r\n    }\r\n`;\r\n\r\nexport const CREATE_REPLY=gql`\r\n    mutation CREATE_REPLY($email:String!,$content:String,$comment:ID){\r\n        addReply(email:$email,content:$content,comment:$comment)\r\n        {\r\n            _id\r\n        }\r\n    }\r\n`;\r\n","import React from 'react'\r\nimport { TextField, Button } from '@material-ui/core'\r\nimport { CREATE_REPLY } from './Mutation';\r\nimport { useMutation } from '@apollo/react-hooks';\r\nimport { CommentType } from './Interface';\r\nimport { GET_COMMENT } from './Query';\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\ninterface Props {\r\n    comment:string\r\n}\r\ninterface CommentData{\r\n    createReply:CommentType\r\n}\r\nconst CreateReply = (props: Props) => {\r\n    const [email, setEmail] = React.useState('');\r\n    const [content, setContent] = React.useState('');\r\n    const [emailValid,setEmailValid] =React.useState<\"success\" | \"error\" | \"warning\" | undefined>()\r\n    function save() {\r\n        saveComment();\r\n        setContent('');\r\n        setEmail('');\r\n    }\r\n    const [saveComment, { error, data }]=  useMutation<CommentData,{}>(\r\n        CREATE_REPLY,\r\n        {\r\n            variables:{email:email,content:content, comment:props.comment},\r\n            refetchQueries:[{query:GET_COMMENT, variables: { id:props.comment}}]\r\n        }\r\n    )\r\n    return (\r\n        <div style={{textAlign:'left',padding:16}}>\r\n            {error ? <p> {error.message}</p> : null}\r\n            \r\n            <div>\r\n            <TextField\r\n                id=\"outlined-name\"\r\n                label=\"Email\"\r\n                value={email}\r\n                onChange={(event)=>{\r\n                    setEmail(event.target.value)\r\n                    setEmailValid(emailRegex.test(event.target.value.toLowerCase()) ? 'success' : 'error')\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n            </div>\r\n            <div>\r\n            <TextField\r\n                placeholder=\"Leave a reply here\"\r\n                multiline\r\n                rows={2}\r\n                rowsMax={4}\r\n                style = {{width: 500}}\r\n                value={content}\r\n                onChange={(event)=>setContent(event.target.value)}\r\n            />\r\n            </div>\r\n            <div style={{marginTop:10}}>\r\n            <Button variant=\"contained\"\r\n            disabled={emailValid !== 'success'}\r\n            onClick={()=> email && save()}>reply</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateReply\r\n","import React, { useState } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { List,ListItem, IconButton, TextField, Button } from '@material-ui/core';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ReplyIcon from '@material-ui/icons/Reply';\r\nimport CreateReply from './CreateReply';\r\nimport SubdirectoryArrowRightIcon from '@material-ui/icons/SubdirectoryArrowRight';\r\nimport { GET_COMMENT } from './Query';\r\nimport { useQuery } from '@apollo/react-hooks';\r\nimport {CommentType} from './Interface'\r\ninterface Props {\r\n    comment:CommentType;\r\n}\r\ninterface CommentData{\r\n    comment:CommentType\r\n}\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n      width: '100%',\r\n      maxWidth: 500\r\n    },\r\n    paper: {\r\n      padding: theme.spacing(2),\r\n      textAlign: 'left',\r\n      color: theme.palette.text.secondary,\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    email:{\r\n        margin: theme.spacing(1)\r\n    },\r\n    date:{\r\n        margin: theme.spacing(1)\r\n    },\r\n    comment:{\r\n        width:'80%',\r\n        margin: theme.spacing(1),\r\n        wordWrap: 'break-word'\r\n    }\r\n  }),\r\n);\r\n\r\n\r\nconst Comment = (props: Props) => {\r\n    const comment= props.comment;\r\n    const classes = useStyles();\r\n    const [addComment, setAddComment]=useState(false);\r\n\r\n    const{loading,data}= useQuery<CommentData,{}>(\r\n        GET_COMMENT,\r\n        {variables:{id:props.comment._id}}\r\n    );\r\n    return (\r\n        <div>\r\n        {loading?<div>Loading...</div>:\r\n        <div>\r\n        <Grid container className={classes.root}>\r\n\r\n            <span className={classes.email}>\r\n                {data&& data.comment&& data.comment.email}\r\n            </span>\r\n            <span className={classes.date}>\r\n                {data&&data.comment&&data.comment.time}\r\n            </span>\r\n            \r\n            <div className={classes.comment}>\r\n                {data&&data.comment&&data.comment.content}\r\n            </div>\r\n        </Grid>\r\n\r\n        \r\n        <Grid>\r\n        \r\n            <List>\r\n            {data&&data.comment&&data.comment.replies && data.comment.replies.map(reply=>(\r\n                <ListItem key={reply._id}>\r\n                    \r\n                <Comment comment={reply}/>\r\n                \r\n                </ListItem>\r\n            ))}\r\n            </List>  \r\n        </Grid>\r\n        <Button size=\"small\" onClick={()=>setAddComment(!addComment)}><SubdirectoryArrowRightIcon/>reply to {comment.email}</Button>\r\n\r\n        {addComment?<CreateReply comment={comment._id}/>:null}\r\n        </div> \r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment\r\n","import React from 'react'\r\nimport { CREATE_COMMENT } from './Mutation'\r\nimport { useMutation } from '@apollo/react-hooks'\r\nimport { TextField, Button } from '@material-ui/core'\r\nimport { CommentType } from './Interface'\r\nimport { GET_COMMENTS } from './Query'\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\ninterface Props {\r\n\r\n}\r\ninterface CommentData{\r\n    createComment:CommentType\r\n}\r\nconst CreateComment = (props: Props) => {\r\n\r\n    const [email, setEmail] = React.useState('');\r\n    const [content, setContent] = React.useState('');\r\n    const [emailValid,setEmailValid] =React.useState<\"success\" | \"error\" | \"warning\" | undefined>()\r\n    function save() {\r\n        saveComment();\r\n        setContent('');\r\n        setEmail('');\r\n    }\r\n    const [saveComment, { error, data }]=  useMutation<CommentData,{}>(\r\n        CREATE_COMMENT,\r\n        {\r\n            variables:{email:email,content:content},\r\n            refetchQueries:[{query:GET_COMMENTS}]\r\n        }\r\n    )\r\n    return (\r\n        \r\n        <div style={{textAlign:'left',padding:16}}>\r\n            {error ? <p> {error.message}</p> : null}\r\n            \r\n            <div>\r\n            <TextField\r\n                id=\"outlined-name\"\r\n                label=\"Email\"\r\n                value={email}\r\n                onChange={(event)=>{\r\n                    setEmail(event.target.value)\r\n                    setEmailValid(emailRegex.test(event.target.value.toLowerCase()) ? 'success' : 'error')\r\n                }}\r\n                variant=\"outlined\"\r\n            />\r\n            </div>\r\n            <div>\r\n            <TextField\r\n                placeholder=\"Leave a comment here\"\r\n                multiline\r\n                rows={2}\r\n                rowsMax={4}\r\n                style = {{width: 500}}\r\n                value={content}\r\n                onChange={(event)=>setContent(event.target.value)}\r\n            />\r\n            </div>\r\n            <div style={{marginTop:10}}>\r\n            <Button variant=\"contained\" \r\n            disabled={emailValid !== 'success'}\r\n            onClick={()=>email && save()}>comment</Button>\r\n            </div>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\nexport default CreateComment\r\n","import React from 'react'\r\nimport { useQuery, useMutation} from '@apollo/react-hooks'\r\nimport { GET_COMMENTS } from './Query';\r\nimport Comment from './Comment';\r\nimport { List,ListItem, TextField, Button } from '@material-ui/core';\r\nimport { CREATE_COMMENT } from './Mutation';\r\nimport CreateComment from './CreateComment';\r\nimport {CommentType} from './Interface'\r\ninterface Props {\r\n    \r\n}\r\ninterface CommentListType{\r\n    comments:CommentType[]\r\n}\r\n\r\nconst CommentList = (props: Props) => {\r\n    const{loading,data}= useQuery<CommentListType,{}>(\r\n        GET_COMMENTS\r\n    );\r\n\r\n    console.log(\"fetching....\")\r\n    return (\r\n        <div >\r\n            Commnet List\r\n            {loading?(<p>Loading...</p>):\r\n                (<div>\r\n                <List>\r\n                    {data && data.comments.map(comment=>(\r\n                    <ListItem key={comment._id}>\r\n                    <Comment comment={comment}/>\r\n                    </ListItem>\r\n                    ))}\r\n                </List>\r\n                <CreateComment />\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CommentList\r\n","import React from 'react';\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport './App.css';\nimport client from './Client.js'\nimport CommandList from './component/CommentList'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n    <ApolloProvider client={client}>\n      <CommandList/>\n    </ApolloProvider>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}